/**
 * Script de test pour v√©rifier le seed
 */

const { PrismaClient } = require('@prisma/client');

async function testSeed() {
  console.log('üß™ Test du seed de la base de donn√©es');
  console.log('=====================================');

  const prisma = new PrismaClient();

  try {
    // Test de connexion
    console.log('üîå Test de connexion √† la base de donn√©es...');
    await prisma.$connect();
    console.log('‚úÖ Connexion r√©ussie !');

    // V√©rifier les donn√©es existantes
    console.log('\nüìä V√©rification des donn√©es existantes...');
    
    const regions = await prisma.region.count();
    const departments = await prisma.departement.count();
    const arrondissements = await prisma.arrondissement.count();
    const participationsDept = await prisma.participationDepartement.count();
    const participationsArr = await prisma.participationArrondissement.count();
    const candidats = await prisma.candidat.count();
    const partis = await prisma.partiPolitique.count();
    const utilisateurs = await prisma.utilisateur.count();
    const roles = await prisma.role.count();

    console.log(`   ‚Ä¢ R√©gions: ${regions}`);
    console.log(`   ‚Ä¢ D√©partements: ${departments}`);
    console.log(`   ‚Ä¢ Arrondissements: ${arrondissements}`);
    console.log(`   ‚Ä¢ Participations d√©partementales: ${participationsDept}`);
    console.log(`   ‚Ä¢ Participations d'arrondissement: ${participationsArr}`);
    console.log(`   ‚Ä¢ Candidats: ${candidats}`);
    console.log(`   ‚Ä¢ Partis politiques: ${partis}`);
    console.log(`   ‚Ä¢ Utilisateurs: ${utilisateurs}`);
    console.log(`   ‚Ä¢ R√¥les: ${roles}`);

    // Test des relations
    console.log('\nüîó Test des relations...');
    
    const participationArrWithRelations = await prisma.participationArrondissement.findFirst({
      include: {
        arrondissement: {
          include: {
            departement: {
              include: {
                region: true
              }
            }
          }
        }
      }
    });

    if (participationArrWithRelations) {
      console.log('‚úÖ Relations ParticipationArrondissement ‚Üí Arrondissement ‚Üí D√©partement ‚Üí R√©gion OK');
      console.log(`   Exemple: ${participationArrWithRelations.arrondissement.libelle} ‚Üí ${participationArrWithRelations.arrondissement.departement.libelle} ‚Üí ${participationArrWithRelations.arrondissement.departement.region.libelle}`);
    } else {
      console.log('‚ö†Ô∏è Aucune participation d\'arrondissement trouv√©e');
    }

    // Test des calculs
    console.log('\nüßÆ Test des calculs...');
    
    const participation = await prisma.participationArrondissement.findFirst();
    if (participation) {
      const tauxParticipation = (participation.nombre_votant / participation.nombre_inscrit) * 100;
      const suffrageExprime = (participation.nombre_suffrages_valable / participation.nombre_votant) * 100;
      
      console.log(`   Taux de participation calcul√©: ${tauxParticipation.toFixed(2)}%`);
      console.log(`   Suffrage exprim√© calcul√©: ${suffrageExprime.toFixed(2)}%`);
      console.log(`   Taux stock√©: ${participation.taux_participation}%`);
      console.log(`   Suffrage stock√©: ${participation.suffrage_exprime}%`);
      
      if (Math.abs(tauxParticipation - participation.taux_participation) < 0.01) {
        console.log('‚úÖ Calculs de participation corrects');
      } else {
        console.log('‚ö†Ô∏è Diff√©rence dans les calculs de participation');
      }
    }

    console.log('\n‚úÖ Test du seed termin√© avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    
    if (error.message.includes('DATABASE_URL')) {
      console.log('\nüí° Solution:');
      console.log('   1. Configurez votre base de donn√©es PostgreSQL');
      console.log('   2. Modifiez le fichier .env avec vos informations de connexion');
      console.log('   3. Ex√©cutez: node scripts/setup-database.js');
    }
  } finally {
    await prisma.$disconnect();
  }
}

testSeed();
